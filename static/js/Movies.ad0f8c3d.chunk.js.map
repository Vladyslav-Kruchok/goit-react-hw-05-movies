{"version":3,"file":"static/js/Movies.ad0f8c3d.chunk.js","mappings":"gLAGMA,EAAW,SAAC,GAAmC,IAAD,IAAhCC,KAAQC,EAAwB,EAAxBA,GAAIC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MACtC,OACI,+BACI,yBACI,SAAC,KAAD,CAAMC,GAAE,kBAAaH,GAArB,SAA4BC,GAAQC,SAMhDJ,EAASM,UAAY,CACjBL,KAAMM,IAAAA,MAAe,CACjBL,GAAIK,IAAAA,OAAAA,WACJJ,KAAKI,IAAAA,OAAAA,WACLH,MAAOG,IAAAA,OAAAA,cAIf,O,0JCnBaC,EAAMC,EAAAA,GAAAA,IAAH,ufAuBHC,EAAOD,EAAAA,GAAAA,KAAH,4LAUJE,EAAaF,EAAAA,GAAAA,OAAH,uTAeVG,EAAYH,EAAAA,GAAAA,MAAH,wM,SC3ChBI,EAAY,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAChB,GAAkCC,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KAcA,OACI,SAACT,EAAD,WACI,UAACE,EAAD,CAAMI,SAfK,SAACI,GAChBA,EAAEC,iBACsB,KAApBH,EAAUI,OAIdN,EAASE,GAHLK,MAAM,qBAYN,WACI,SAACV,EAAD,CAAYW,KAAK,SAAjB,qBAGA,SAACV,EAAD,CACIU,KAAK,OACLnB,KAAK,YACLoB,MAAOP,EACPQ,SAfQ,SAACN,GACrB,IAAQK,EAAUL,EAAEO,cAAZF,MACRN,EAAaM,IAcDG,aAAa,MACbC,WAAS,EACTC,YAAY,wBAMhCf,EAAUgB,UAAY,CAClBf,SAAUP,IAAAA,KAAAA,WACVuB,QAASvB,IAAAA,KAAAA,YAGb,Q,oBClCMwB,EAAS,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WACb,GAAkCjB,EAAAA,EAAAA,WAAS,iBAAM,MAAjD,eAAOkB,EAAP,KAAkBC,EAAlB,KACA,GAA4BnB,EAAAA,EAAAA,UAAS,MAArC,eAAOoB,EAAP,KAAeC,EAAf,KAEA,GAA4CrB,EAAAA,EAAAA,WAAS,iBAAM,MAA3D,eAAOsB,EAAP,KAAuBC,EAAvB,KACA,GAAwCC,EAAAA,EAAAA,KAAgB,iBAAM,MAA9D,eAAOC,EAAP,KAAqBC,EAArB,KAEA,GAA6BC,EAAAA,EAAAA,MAArBC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,QAGlBC,EAAAA,EAAAA,YAAU,YACNP,EAAkBE,EAAaM,IAAI,UACnCZ,EAAaD,GAAaI,GAErBJ,MAEgBc,EAAAA,EAAAA,IAAa,eAAgB,EAAGd,GAAaI,GACrDW,MAAK,SAAAzB,GACda,EAAUb,EAAM0B,SAChBR,EAAgB,CAACS,MAAOjB,GAAY,CAAEkB,SAAS,OAGnDC,QAAQC,SACT,CAACpB,EAAWO,EAAcC,EAAiBJ,KAE9CQ,EAAAA,EAAAA,YAAU,WACNL,GAAgBR,EAAWW,EAAWC,KACvC,CAACJ,EAAcR,EAAYW,EAAUC,IAMxC,OACI,6BACI,SAAC,EAAD,CAAW9B,SANI,SAACwC,GACpBpB,EAAaoB,MAMRnB,IACG,wBACKA,EAAOoB,KAAI,SAAAC,GAAI,OACZ,SAACxD,EAAA,EAAD,CAAUE,GAAIsD,EAAKtD,GAAID,KAAMuD,GAAWA,EAAKtD,aAQrE6B,EAAOF,UAAY,CACf4B,IAAKlD,IAAAA,MAAAA,WACLyB,WAAYzB,IAAAA,KAAAA,YAGhB,S,oBChEe,SAASmD,EAAuBC,EAASC,GAKtD,OAJKA,IACHA,EAAMD,EAAQE,MAAM,IAGfC,OAAOC,OAAOD,OAAOE,iBAAiBL,EAAS,CACpDC,IAAK,CACHrC,MAAOuC,OAAOC,OAAOH,O","sources":["components/ListItem/ListItem.jsx","components/Searchbar/Searchbar.styled.js","components/Searchbar/Searchbar.jsx","pages/Movies/Movies.jsx","../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js"],"sourcesContent":["import PropType from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nconst ListItem = ({ film: { id, name, title } }) => { \nreturn (\n    <>\n        <li>\n            <Link to={`/movies/${id}`}>{name || title}</Link>\n        </li>\n    </>\n    );\n};\n\nListItem.prototype = {\n    film: PropType.shape({\n        id: PropType.number.isRequired,\n        name:PropType.string.isRequired,\n        title: PropType.string.isRequired\n    })\n};\n\nexport default ListItem;","import styled from 'styled-components';\n\nexport const Div = styled.div`\n    top: 0;\n    left: 0;\n\n    position: sticky;\n    z-index: 1100;\n    \n    display: flex;\n    justify-content: center;\n    align-items: center;\n    \n    min-height: 64px;\n    padding-right: 24px;\n    padding-left: 24px;\n    padding-top: 12px;\n    padding-bottom: 12px;\n    \n    color: #fff;\n    background-color: #3f51b5;\n    box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n        0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n`;\n\nexport const Form = styled.form`\n    display: flex;\n    align-items: center;\n    width: 100%;\n    max-width: 600px;\n    background-color: #fff;\n    border-radius: 3px;\n    overflow: hidden;\n`;\n\nexport const FormButton = styled.button`\n    display: inline-block;\n    width: 60px;\n    height: 48px;\n    border: 0;\n    opacity: 0.6;\n    transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    cursor: pointer;\n    outline: none;\n    &:hover,\n    &:focus {\n        opacity: 1;\n        font-weight: 900;\n    }\n`;\nexport const FormInput = styled.input`\n    display: inline-block;\n    width: 100%;\n    font: inherit;\n    font-size: 16px;\n    border: none;\n    outline: none;\n    padding-left: 4px;\n    padding-right: 4px;\n`;","//React\nimport PropType from 'prop-types';\nimport { useState } from 'react';\n//Style\nimport { Form, FormButton, FormInput } from 'components/Searchbar/Searchbar.styled';\nimport { Div } from 'components/Searchbar/Searchbar.styled';\n\nconst Searchbar = ({onSubmit}) => { //, onClick\n    const [searchStr, setSearchStr] = useState(\"\");\n    const exportData = (e) => { \n        e.preventDefault();\n        if (searchStr.trim() ==='') {\n            alert('enter some value')\n            return;\n        }\n        onSubmit(searchStr);\n    }; \n    const updateCurrState = (e) => {\n        const { value } = e.currentTarget;\n        setSearchStr(value);\n    };\n\n    return (\n        <Div>\n            <Form onSubmit = {exportData}>\n                <FormButton type=\"submit\">\n                    Search\n                </FormButton>\n                <FormInput\n                    type=\"text\"\n                    name=\"searchStr\"\n                    value={searchStr}\n                    onChange={updateCurrState}\n                    autoComplete=\"off\"\n                    autoFocus\n                    placeholder=\"Search movies\"\n                />\n            </Form>\n        </Div>\n    );\n};\nSearchbar.protoType = {\n    onSubmit: PropType.func.isRequired,\n    onClick: PropType.func.isRequired\n};\n\nexport default Searchbar;","//React\nimport PropType from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\n\n//Components export default\nimport Searchbar from 'components/Searchbar/Searchbar.jsx';\nimport ListItem from 'components/ListItem/ListItem.jsx';\n\n//API\nimport { tmdbMovieAPI } from 'api/tmdbAPI';\n\nconst Movies = ({setHistory}) => {\n    const [searchVal, setSearchVal] = useState(() => '');\n    const [movArr, setMovArr] = useState(null);\n    \n    const [searchUrlQuery, setSearchUrlQuery] = useState(() => '');\n    const [searchParams, setSearchParams] = useSearchParams(() => '');\n    \n    const { pathname, search } = useLocation();\n\n\n    useEffect(() => {\n        setSearchUrlQuery(searchParams.get('query'));\n        setSearchVal(searchVal || searchUrlQuery);\n\n        if (!searchVal) return;\n\n        const searchByName = tmdbMovieAPI('search/movie', 1, searchVal || searchUrlQuery);\n        searchByName.then(value => {\n            setMovArr(value.movData);\n            setSearchParams({query: searchVal}, { replace: true });\n        })\n\n        console.log()\n    }, [searchVal, searchParams, setSearchParams, searchUrlQuery]);\n    \n    useEffect(() => {\n        searchParams && setHistory(pathname + search);\n    }, [searchParams, setHistory, pathname, search]);\n\n    const getDataExtForm = (data) => { \n        setSearchVal(data);\n    };\n\n    return (\n        <main>\n            <Searchbar onSubmit={getDataExtForm} /> \n            {movArr &&\n                <ul>\n                    {movArr.map(item => \n                        <ListItem id={item.id} film={item} key={item.id} />\n                    )}\n                </ul>\n            }\n        </main>\n    );\n};\n\nMovies.protoType = {\n    arr: PropType.array.isRequired,\n    setHistory: PropType.func.isRequired\n}\n\nexport default Movies;","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}"],"names":["ListItem","film","id","name","title","to","prototype","PropType","Div","styled","Form","FormButton","FormInput","Searchbar","onSubmit","useState","searchStr","setSearchStr","e","preventDefault","trim","alert","type","value","onChange","currentTarget","autoComplete","autoFocus","placeholder","protoType","onClick","Movies","setHistory","searchVal","setSearchVal","movArr","setMovArr","searchUrlQuery","setSearchUrlQuery","useSearchParams","searchParams","setSearchParams","useLocation","pathname","search","useEffect","get","tmdbMovieAPI","then","movData","query","replace","console","log","data","map","item","arr","_taggedTemplateLiteral","strings","raw","slice","Object","freeze","defineProperties"],"sourceRoot":""}
{"version":3,"file":"static/js/MovieDetail.c23c96bd.chunk.js","mappings":"mQAGaA,GAAOC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,gV,mBCAJD,GAAOC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,sKAUJE,EAAkBF,EAAAA,GAAAA,QAAH,6EAIfG,EAAiBH,EAAAA,GAAAA,QAAH,6F,SCPrBI,EAAU,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACPC,EAA4ED,EAA5EC,eAAgBC,EAA4DF,EAA5DE,WAAYC,EAAgDH,EAAhDG,SAAUC,EAAsCJ,EAAtCI,OAAQC,EAA8BL,EAA9BK,YAAaC,EAAiBN,EAAjBM,aACnE,GAA8BC,EAAAA,EAAAA,YAA9B,eAAOC,EAAP,KAAgBC,EAAhB,KAWA,OALAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,GAAcC,EAAAA,EAAAA,IAAaP,EAAD,WAXtB,MAYVI,EAAWE,KACZ,CAACN,KAGA,iCACI,UAACR,EAAD,YACI,gBAAKgB,IAAKL,EAASM,IAAG,UAAKb,EAAL,YAA+Bc,MAAK,UAlBxD,QAoBF,2BACI,2BACI,0BAAKd,EAAL,KAfH,IAAIe,KAAKV,GAAcW,eACrB,YAcC,QACA,wCAAgBf,SAEpB,2BACI,sCACA,uBAAIC,OAEPC,IAAU,2BACP,oCACA,uBAAIA,EAAOc,KAAI,YAAa,IAAXC,EAAU,EAAVA,KACb,MAAM,IAAN,OAAWA,EAAX,qBAMhB,UAACrB,EAAD,YACI,mDACA,2BACI,yBACI,SAAC,EAAD,CAAMsB,GAAG,OAAT,qBAEJ,yBACI,SAAC,EAAD,CAAMA,GAAG,UAAT,iCAOxBrB,EAAQsB,UAAY,CAChBrB,SAAUsB,IAAAA,MAAe,CACrBrB,eAAgBqB,IAAAA,OAAAA,WAChBpB,WAAYoB,IAAAA,OAAAA,WACZnB,SAAWmB,IAAAA,OAAAA,WACXlB,OAAQkB,IAAAA,MAAe,CACnBH,KAAMG,IAAAA,OAAAA,aAEVjB,YAAaiB,IAAAA,OAAAA,WACbhB,aAAcgB,IAAAA,OAAAA,cAItB,QCrCA,EA1BoB,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACXC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAgCjB,EAAAA,EAAAA,UAAS,MAAzC,eAAOP,EAAP,KAAiB0B,EAAjB,KAaA,OAXAhB,EAAAA,EAAAA,YAAU,WACN,IAAMiB,GAAQC,EAAAA,EAAAA,IAAe,QAAD,UAAaJ,IACrCG,GACAA,EAAME,MAAK,SAAAC,GACFA,GACLJ,EAAYI,EAAMC,WAI3B,CAACP,KAGA,6BACI,SAAC9B,EAAD,CAAM0B,GAAIG,EAAV,qBACCvB,IAAY,SAAC,EAAD,CAASA,SAAUA,KAGhC,SAAC,KAAD,S,oBC/BG,SAASgC,EAAuBC,EAASC,GAKtD,OAJKA,IACHA,EAAMD,EAAQE,MAAM,IAGfC,OAAOC,OAAOD,OAAOE,iBAAiBL,EAAS,CACpDC,IAAK,CACHJ,MAAOM,OAAOC,OAAOH,O","sources":["pages/MovieDetail/MovieDetail.syled.js","components/MainInf/MainInf.styled.js","components/MainInf/MainInf.jsx","pages/MovieDetail/MovieDetail.jsx","../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const Link = styled(NavLink)`\n    display: block;\n    width: 100px;\n    text-align: center;\n    padding: 8px 16px;\n    margin-top: 8px;\n    margin-bottom:8px;\n    text-decoration: none;\n    color: blue;\n    font-weight: 500;\n    border: 1px solid black;\n    border-radius: 5px;\n    \n    &.active {\n        color: violet;\n    }\n`;","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const Link = styled(NavLink)`\n    padding: 8px 16px;\n    text-decoration: none;\n    color: blue;\n    font-weight: 500;\n\n    &.active {\n        color: violet;\n    }\n`;\nexport const SectionMainInfo = styled.section`\n    display: flex;\n    border-top: 1px solid grey;\n`;\nexport const SectionAddInfo = styled.section`\n    border-top: 1px solid grey;\n    border-bottom: 1px solid grey;\n`;","//React\nimport PropType from 'prop-types';\nimport { useState, useEffect } from 'react';\n//Style\nimport { Link, SectionMainInfo, SectionAddInfo } from \"./MainInf.styled\";\n//API\nimport { tmdbImageAPI } from 'api/tmdbAPI';\n\nconst WIDTH_IMG = 300;\n\nconst MainInf = ({ movieObj }) => {\n    const { original_title, popularity, overview, genres, poster_path, release_date } = movieObj;\n    const [imgLink, setImgLink] = useState();\n    \n    const getYear = () => { \n        const date = new Date(release_date).getFullYear();\n        return date || 'not found';\n    };\n    useEffect(() => {\n        const fullImgLink = tmdbImageAPI(poster_path, `w${WIDTH_IMG}`);\n        setImgLink(fullImgLink);\n    }, [poster_path]);\n\n    return (\n        <>\n            <SectionMainInfo>\n                <img src={imgLink} alt={`${original_title}'s title`} width={`${WIDTH_IMG}`} />\n                \n                <ul>\n                    <li>\n                        <h2>{original_title} ({getYear()})</h2>\n                        <p>Popularity: {popularity}</p>\n                    </li>\n                    <li>\n                        <h3>Overview</h3>\n                        <p>{overview}</p>\n                    </li>\n                    {genres && <li>\n                        <h3>Genres</h3>\n                        <p>{genres.map(({name}) => {\n                            return `[${name}] `\n                        })}\n                        </p>\n                    </li>}\n                </ul>\n            </SectionMainInfo>\n            <SectionAddInfo>\n                <p>Additional information</p>\n                <ul>\n                    <li>\n                        <Link to=\"cast\">Cast</Link>\n                    </li>\n                    <li>\n                        <Link to=\"reviews\">Reviews</Link>\n                    </li>\n                </ul>\n            </SectionAddInfo>\n        </>\n    );\n};\nMainInf.protoType = {\n    movieObj: PropType.shape({\n        original_title: PropType.string.isRequired,\n        popularity: PropType.number.isRequired,\n        overview : PropType.string.isRequired,\n        genres: PropType.shape({\n            name: PropType.string.isRequired\n        }),\n        poster_path: PropType.string.isRequired,\n        release_date: PropType.string.isRequired\n    })\n};\n\nexport default MainInf;","//React\nimport { useState, useEffect } from 'react';\nimport { Outlet, useParams } from 'react-router-dom';\n//API\nimport { tmdbMovieIdAPI } from 'api/tmdbAPI';\n//Style\nimport { Link } from './MovieDetail.syled';\n//Component export default\nimport MainInf from 'components/MainInf/MainInf.jsx';\n\nconst MovieDetail = ({ history }) => {\n    const { movieId } = useParams();\n    const [movieObj, setMovieObj] = useState(null);\n\n    useEffect(() => {\n        const movie = tmdbMovieIdAPI('movie', `${movieId}`);\n        if (movie) {\n            movie.then(value => {\n                if (!value) return;\n                setMovieObj(value.data);\n            });\n        };\n\n    }, [movieId]);\n\n    return (\n        <main>\n            <Link to={history}>Go Back</Link>\n            {movieObj && <MainInf movieObj={movieObj} />}\n            {/* to tranfer object into outlet comtonent */}\n            {/* <Outlet context={[movieObj]} /> */}\n            <Outlet/>\n        </main>        \n    );\n};\n\nexport default MovieDetail;","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}"],"names":["Link","styled","NavLink","SectionMainInfo","SectionAddInfo","MainInf","movieObj","original_title","popularity","overview","genres","poster_path","release_date","useState","imgLink","setImgLink","useEffect","fullImgLink","tmdbImageAPI","src","alt","width","Date","getFullYear","map","name","to","protoType","PropType","history","movieId","useParams","setMovieObj","movie","tmdbMovieIdAPI","then","value","data","_taggedTemplateLiteral","strings","raw","slice","Object","freeze","defineProperties"],"sourceRoot":""}
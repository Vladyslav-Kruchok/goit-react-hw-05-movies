{"version":3,"file":"static/js/Cast.e5324f8d.chunk.js","mappings":"6PACaA,E,QAAcC,GAAAA,IAAH,qH,mBCSlBC,EAAc,SAAC,GAAqD,IAAD,IAAlDC,SAAYC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,UAAWC,EAAqB,EAArBA,aAChD,GAA8BC,EAAAA,EAAAA,YAA9B,eAAOC,EAAP,KAAgBC,EAAhB,KAOA,OALAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,GAAcC,EAAAA,EAAAA,IAAaN,EAAD,WANtB,MAOVG,EAAWE,KACZ,CAACL,KAGA,UAACN,EAAD,YACI,gBAAKa,IAAKL,EAASM,IAAKV,KACxB,2BACI,wBAAKA,KACL,wCAAgBC,YAMhCH,EAAYa,UAAY,CACpBZ,SAAUa,IAAAA,MAAe,CACrBZ,KAAMY,IAAAA,OAAAA,WACNX,UAAWW,IAAAA,OAAAA,WACXV,aAAcU,IAAAA,OAAAA,cAItB,QCDA,EAvBa,WAET,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BV,EAAAA,EAAAA,UAAS,MAAvC,eAAOY,EAAP,KAAgBC,EAAhB,KAWA,OATAV,EAAAA,EAAAA,YAAU,WACN,IAAMW,GAAcC,EAAAA,EAAAA,IAAe,QAAD,UAAaL,GAAW,WACtDI,GACAA,EAAYE,MAAK,SAAAC,GACRA,GACLJ,EAAWI,EAAMC,KAAKC,WAG/B,CAACT,KAEA,SAACU,EAAA,EAAD,UACKR,GAAWA,EAAQS,KAAI,SAACzB,GACrB,OAAO,SAAC,EAAD,CAAaA,SAAUA,GAAeA,EAAS0B,W,qDC5BhEF,EAAU,SAAC,GAAkB,IAAhBG,EAAe,EAAfA,SACf,OACI,6BACKA,KAKbH,EAAQZ,UAAY,CAChBe,SAAUC,IAAAA,KAAAA,YAGd,O,oBCde,SAASC,EAAuBC,EAASC,GAKtD,OAJKA,IACHA,EAAMD,EAAQE,MAAM,IAGfC,OAAOC,OAAOD,OAAOE,iBAAiBL,EAAS,CACpDC,IAAK,CACHV,MAAOY,OAAOC,OAAOH,O","sources":["components/CastDetails/CastDetails.styled.js","components/CastDetails/CastDetails.jsx","components/Cast/Cast.jsx","components/Section/Section.jsx","../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js"],"sourcesContent":["import styled from 'styled-components';\nexport const DivCastInfo = styled.div`\n    display: flex;\n    border: 1px solid grey;\n    padding: 5px;\n    margin-bottom: 5px;\n`;","//React\nimport { useState, useEffect } from 'react';\nimport PropType from 'prop-types';\n//Style\nimport { DivCastInfo } from \"./CastDetails.styled\";\n//API\nimport { tmdbImageAPI } from 'api/tmdbAPI';\n\nconst WIDTH_IMG = 200;\n\nconst CastDetails = ({ castItem: { name, character, profile_path } }) => { \n    const [imgLink, setImgLink] = useState();\n    \n    useEffect(() => {\n        const fullImgLink = tmdbImageAPI(profile_path, `w${WIDTH_IMG}`);\n        setImgLink(fullImgLink);\n    }, [profile_path]);\n    \n    return (\n        <DivCastInfo>\n            <img src={imgLink} alt={name} />\n            <ul>\n                <li>{name}</li>\n                <li>character: {character}</li>\n            </ul>\n        </DivCastInfo>\n    );\n};\n\nCastDetails.protoType = {\n    castItem: PropType.shape({\n        name: PropType.string.isRequired,\n        character: PropType.string.isRequired,\n        profile_path: PropType.string.isRequired\n    })\n};\n\nexport default CastDetails;","//React\n//import { useOutletContext } from 'react-router-dom';\nimport { useParams } from 'react-router-dom';\nimport { useEffect, useState } from \"react\";\n//Component export default\nimport Section from 'components/Section/Section.jsx';\nimport CastDetails from 'components/CastDetails/CastDetails.jsx';\n//API\nimport { tmdbMovieIdAPI } from 'api/tmdbAPI';\n\n\n\n\nconst Cast = () => { \n    //const [movieObj] = useOutletContext();\n    const { movieId } = useParams();\n    const [castObj, setCastObj] = useState(null);\n    \n    useEffect(() => {\n        const castPromise = tmdbMovieIdAPI('movie', `${movieId}`, 'credits');\n        if (castPromise) {\n            castPromise.then(value => {\n                if (!value) return;\n                setCastObj(value.data.cast);\n            });    \n        }\n    }, [movieId]);\n    return (\n        <Section>\n            {castObj && castObj.map((castItem) => {\n                return <CastDetails castItem={castItem} key={castItem.id} />\n            })}\n        </Section>\n    );\n};\n\nexport default Cast;","import PropTypes from \"prop-types\";\n\nconst Section = ({ children }) => { \n    return (\n        <section>\n            {children}\n        </section>\n    );\n};\n\nSection.protoType = {\n    children: PropTypes.node.isRequired\n};\n\nexport default Section;","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}"],"names":["DivCastInfo","styled","CastDetails","castItem","name","character","profile_path","useState","imgLink","setImgLink","useEffect","fullImgLink","tmdbImageAPI","src","alt","protoType","PropType","movieId","useParams","castObj","setCastObj","castPromise","tmdbMovieIdAPI","then","value","data","cast","Section","map","id","children","PropTypes","_taggedTemplateLiteral","strings","raw","slice","Object","freeze","defineProperties"],"sourceRoot":""}
{"version":3,"file":"static/js/Reviews.c7d79c87.chunk.js","mappings":"2PAGMA,EAAiB,SAAC,GAAqC,IAAD,IAAnCC,WAAaC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC1C,OACI,2BACI,wBAAKD,KACL,uBAAIC,QAKhBH,EAAeI,UAAY,CACvBH,WAAYI,IAAAA,MAAe,CACvBH,OAAQG,IAAAA,OAAAA,WACRF,QAASE,IAAAA,OAAAA,cAIjB,Q,UCyBA,EA7BgB,WACZ,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAmCE,EAAAA,EAAAA,UAAS,IAA5C,eAAOC,EAAP,KAAmBC,EAAnB,KAYA,OAVAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,GAAiBC,EAAAA,EAAAA,IAAe,QAAD,UAAaP,GAAW,WACzDM,GACAA,EAAeE,MAAK,SAAAC,GACXA,GACLL,EAAaK,EAAMC,KAAKC,cAGjC,CAACX,KAGA,SAACY,EAAA,EAAD,WACI,wBAE+B,IAAtBT,EAAWU,OACNV,EAAWW,KAAI,SAACnB,GACd,OAAO,SAAC,EAAD,CAAgBA,WAAYA,GAAiBA,EAAWoB,OAtBxE,iD,qDCXbH,EAAU,SAAC,GAAkB,IAAhBI,EAAe,EAAfA,SACf,OACI,6BACKA,KAKbJ,EAAQd,UAAY,CAChBkB,SAAUC,IAAAA,KAAAA,YAGd","sources":["components/ReviewsDetails/ReviewsDetails.jsx","components/Reviews/Reviews.jsx","components/Section/Section.jsx"],"sourcesContent":["//React\nimport PropType from 'prop-types';\n\nconst ReviewsDetails = ({reviewItem: {author, content}}) => { \n    return (\n        <li>\n            <h1>{author}</h1>\n            <p>{content}</p>\n        </li>\n    );\n};\n\nReviewsDetails.protoType = {\n    reviewItem: PropType.shape({\n        author: PropType.string.isRequired,\n        content: PropType.string.isRequired\n    })\n};\n\nexport default ReviewsDetails;","//React\n//import { useOutletContext } from 'react-router-dom';\nimport { useParams } from 'react-router-dom';\nimport { useEffect, useState } from \"react\";\n\n//Component\nimport Section from \"components/Section/Section.jsx\";\nimport ReviewsDetails from 'components/ReviewsDetails/ReviewsDetails.jsx';\n//API\nimport { tmdbMovieIdAPI } from 'api/tmdbAPI';\n//Dynamic\n//const ReviewsDetails = lazy(() => { import('../ReviewsDetails') });\n\nconst REVIEW_NOT = 'We don`t have any reviews for this movie';\n\nconst Reviews = () => { \n    const { movieId } = useParams();\n    const [reviewtObj, setReviewObj] = useState([]);\n\n    useEffect(() => {\n        const reviewsPromise = tmdbMovieIdAPI('movie', `${movieId}`, 'reviews');\n        if (reviewsPromise) {\n            reviewsPromise.then(value => {\n                if (!value) return;\n                setReviewObj(value.data.results);\n            });    \n        }\n    }, [movieId]);\n\n    return (\n        <Section>\n            <ul>\n                {\n                    (reviewtObj.length !== 0)\n                        ? reviewtObj.map((reviewItem) => {\n                            return <ReviewsDetails reviewItem={reviewItem} key={reviewItem.id} />;\n                        })\n                        : REVIEW_NOT\n                }\n            </ul>\n        </Section>\n    );\n};\n\nexport default Reviews;","import PropTypes from \"prop-types\";\n\nconst Section = ({ children }) => { \n    return (\n        <section>\n            {children}\n        </section>\n    );\n};\n\nSection.protoType = {\n    children: PropTypes.node.isRequired\n};\n\nexport default Section;"],"names":["ReviewsDetails","reviewItem","author","content","protoType","PropType","movieId","useParams","useState","reviewtObj","setReviewObj","useEffect","reviewsPromise","tmdbMovieIdAPI","then","value","data","results","Section","length","map","id","children","PropTypes"],"sourceRoot":""}